apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'
apply plugin: 'jacoco-android'
apply plugin: 'realm-android'
//noinspection GroovyMissingReturnStatement
android {
  compileSdkVersion 25
  buildToolsVersion "25.0.1"
  defaultConfig {
    applicationId "io.github.joaoevangelista.convertx"
    minSdkVersion 16
    targetSdkVersion 25
    versionName androidGitVersion.name()
    versionCode androidGitVersion.code()
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    vectorDrawables.useSupportLibrary = true
  }
  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    test.java.srcDirs += 'src/test/kotlin'
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
}

dependencies {
  androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
    exclude group: 'com.android.support', module: 'support-annotations'
  })

  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  compile fileTree(dir: 'libs', include: ['*.jar'])
  compile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
    transitive = true;
  }
  compile 'com.jakewharton.rxbinding:rxbinding:0.4.0'
  compile 'com.jakewharton.rxbinding:rxbinding-kotlin:0.4.0'
  compile('org.jscience:jscience:4.3.1') {
    exclude group: 'org.javolution', module: 'javolution'
  }
  debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
  releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
  testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
  compile 'it.sephiroth.android.library.targettooltip:target-tooltip-library:1.3.15'
  compile 'me.grantland:autofittextview:0.2.1'
  compile 'com.android.support:appcompat-v7:25.0.1'
  compile 'com.android.support:cardview-v7:25.0.1'
  compile 'com.android.support:design:25.0.1'
  testCompile 'junit:junit:4.12'
  testCompile ("com.winterbe:expekt:0.5.0") {
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
  }
  testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
}

afterEvaluate {
  initFabricPropertiesIfNeeded()
}

def initFabricPropertiesIfNeeded() {
  def propertiesFile = file('fabric.properties')
  if (!propertiesFile.exists()) {
    def commentMessage = "Auto-generated file from ENV"
    ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
      entry(key: "apiSecret", value: System.getenv("FABRIC_API_SECRET"))
      entry(key: "apiKey", value: System.getenv("FABRIC_API_KEY"))
    }
  }
}
